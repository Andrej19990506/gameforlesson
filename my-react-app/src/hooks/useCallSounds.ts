import { useRef, useCallback } from 'react';

export const useCallSounds = () => {
  const incomingRingRef = useRef<HTMLAudioElement | null>(null);
  const outgoingRingRef = useRef<HTMLAudioElement | null>(null);
  const callConnectedRef = useRef<HTMLAudioElement | null>(null);
  const callEndedRef = useRef<HTMLAudioElement | null>(null);
  const ringIntervalRef = useRef<number | null>(null);

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ Web Audio API
  const createBeepSound = (frequency: number, duration: number = 0.1) => {
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.value = frequency;
    oscillator.type = 'sine';
    
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + duration);
  };


  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  const playIncomingRing = useCallback(() => {
    console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (ringIntervalRef.current) {
      clearInterval(ringIntervalRef.current);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const playRing = () => {
      try {
        createBeepSound(800, 0.3);
        setTimeout(() => createBeepSound(800, 0.3), 400);
        setTimeout(() => createBeepSound(800, 0.3), 800);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
      }
    };
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
    playRing();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    ringIntervalRef.current = setInterval(playRing, 2000);
  }, [createBeepSound]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  const playOutgoingRing = useCallback(() => {
    console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (ringIntervalRef.current) {
      clearInterval(ringIntervalRef.current);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const playRing = () => {
      try {
        createBeepSound(600, 0.2);
        setTimeout(() => createBeepSound(600, 0.2), 300);
        setTimeout(() => createBeepSound(600, 0.2), 600);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
      }
    };
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
    playRing();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    ringIntervalRef.current = setInterval(playRing, 2000);
  }, [createBeepSound]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const playCallConnected = useCallback(() => {
    console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Audio API –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      createBeepSound(1000, 0.1);
      setTimeout(() => createBeepSound(1200, 0.1), 150);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }, [createBeepSound]);

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const playCallEnded = useCallback(() => {
    console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Audio API –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      createBeepSound(400, 0.2);
      setTimeout(() => createBeepSound(300, 0.2), 250);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', error);
    }
  }, [createBeepSound]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤
  const stopAllSounds = useCallback(() => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω–æ–∫
    if (ringIntervalRef.current) {
      clearInterval(ringIntervalRef.current);
      ringIntervalRef.current = null;
    }
    
    [incomingRingRef, outgoingRingRef, callConnectedRef, callEndedRef].forEach(ref => {
      if (ref.current) {
        ref.current.pause();
        ref.current.currentTime = 0;
      }
    });
    console.log('üîá –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–≤—É–∫–∏ –∑–≤–æ–Ω–∫–æ–≤');
  }, []);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–æ–≤ –∑–≤–æ–Ω–∫–∞ (–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π)
  const stopRingSounds = useCallback(() => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω–æ–∫
    if (ringIntervalRef.current) {
      clearInterval(ringIntervalRef.current);
      ringIntervalRef.current = null;
    }
    
    if (incomingRingRef.current) {
      incomingRingRef.current.pause();
      incomingRingRef.current.currentTime = 0;
    }
    if (outgoingRingRef.current) {
      outgoingRingRef.current.pause();
      outgoingRingRef.current.currentTime = 0;
    }
    console.log('üîá –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–≤—É–∫–∏ –∑–≤–æ–Ω–∫–∞');
  }, []);

  return {
    playIncomingRing,
    playOutgoingRing,
    playCallConnected,
    playCallEnded,
    stopAllSounds,
    stopRingSounds
  };
};
