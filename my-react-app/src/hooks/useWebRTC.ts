import { useState, useRef, useCallback, useEffect } from 'react';
import type { User } from '../types/user';
import io, { Socket } from 'socket.io-client';
import { useCallSounds } from './useCallSounds';

interface CallState {
  isIncoming: boolean;
  isOutgoing: boolean;
  isConnected: boolean;
  caller: User | null;
  isVideo: boolean;
}

export const useWebRTC = () => {
  const [callState, setCallState] = useState<CallState>({
    isIncoming: false,
    isOutgoing: false,
    isConnected: false,
    caller: null,
    isVideo: false
  });

  const { 
    playIncomingRing, 
    playOutgoingRing, 
    playCallConnected, 
    playCallEnded, 
    stopAllSounds, 
    stopRingSounds 
  } = useCallSounds();

  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);
  const localStreamRef = useRef<MediaStream | null>(null);
  const socketRef = useRef<Socket | null>(null);
  const currentUserIdRef = useRef<string | null>(null);
  const incomingOfferRef = useRef<RTCSessionDescriptionInit | null>(null);
  const isEndingCallRef = useRef<boolean>(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.io —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const initializeSocket = useCallback((userId: string) => {
    if (socketRef.current) return socketRef.current;
    
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const socket = io('http://localhost:5000', {
      query: { userId }
    });
    
    socketRef.current = socket;
    currentUserIdRef.current = userId;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('incoming-call', (data: { caller: User, isVideo: boolean, offer?: RTCSessionDescriptionInit }) => {
      console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', data.caller.name, '–í–∏–¥–µ–æ:', data.isVideo);
      console.log('üìû Offer –ø–æ–ª—É—á–µ–Ω:', !!data.offer);
      
      setCallState({
        isIncoming: true,
        isOutgoing: false,
        isConnected: false,
        caller: data.caller,
        isVideo: data.isVideo
      });

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      playIncomingRing();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º offer –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      if (data.offer) {
        incomingOfferRef.current = data.offer;
        console.log('üíæ Offer —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
      }
    });
    
    socket.on('call-accepted', async (data) => {
      console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç, –ø–æ–ª—É—á–µ–Ω answer');
      const { answer } = data;
      if (peerConnectionRef.current) {
        try {
          await peerConnectionRef.current.setRemoteDescription(answer);
          console.log('‚úÖ Remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description:', error);
        }
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–∏ –∑–≤–æ–Ω–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      stopRingSounds();
      playCallConnected();
      
      setCallState(prev => ({ ...prev, isOutgoing: false, isConnected: true }));
    });
    
    socket.on('call-rejected', () => {
      console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      stopAllSounds();
      playCallEnded();
      
      setCallState({
        isIncoming: false,
        isOutgoing: false,
        isConnected: false,
        caller: null,
        isVideo: false
      });
    });
    
    socket.on('call-ended', () => {
      console.log('üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      stopAllSounds();
      playCallEnded();
      
      endCall();
    });

    socket.on('ice-candidate', async (data) => {
      console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE candidate');
      const { candidate } = data;
      if (peerConnectionRef.current && candidate) {
        try {
          await peerConnectionRef.current.addIceCandidate(candidate);
          console.log('‚úÖ ICE candidate –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error);
        }
      }
    });
    
    return socket;
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const initializePeerConnection = useCallback(() => {
    const peerConnection = new RTCPeerConnection({
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
      ]
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ICE candidates
    peerConnection.onicecandidate = (event) => {
      if (event.candidate && socketRef.current) {
        socketRef.current.emit('ice-candidate', {
          candidate: event.candidate,
          targetUserId: callState.caller?._id
        });
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
    peerConnection.ontrack = (event) => {
      const remoteStream = event.streams[0];
      // TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å remote stream –≤ video —ç–ª–µ–º–µ–Ω—Ç
      console.log('–ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫:', remoteStream);
    };

    peerConnectionRef.current = peerConnection;
    return peerConnection;
  }, [callState.caller]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–∞
  const getLocalStream = useCallback(async (isVideo: boolean = false) => {
    try {
      const constraints = {
        audio: true,
        video: isVideo ? {
          width: { ideal: 640 },
          height: { ideal: 480 }
        } : false
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      localStreamRef.current = stream;
      return stream;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–∞:', error);
      throw error;
    }
  }, []);

  // –ù–∞—á–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
  const startCall = useCallback(async (user: User, isVideo: boolean = false) => {
    try {
      console.log('üìû –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', user.name, '–í–∏–¥–µ–æ:', isVideo);
      
      // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
      isEndingCallRef.current = false;
      
      setCallState({
        isIncoming: false,
        isOutgoing: true,
        isConnected: false,
        caller: user,
        isVideo
      });

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      playOutgoingRing();

      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      console.log('üé• –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫...');
      const localStream = await getLocalStream(isVideo);
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º peer connection
      console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º peer connection...');
      const peerConnection = initializePeerConnection();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
      });
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

      // –°–æ–∑–¥–∞–µ–º offer
      console.log('üìù –°–æ–∑–¥–∞–µ–º offer...');
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      console.log('‚úÖ Offer —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ local description');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ Socket.io
      if (socketRef.current) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º call-user —á–µ—Ä–µ–∑ Socket...');
        socketRef.current.emit('call-user', {
          targetUserId: user._id,
          offer,
          isVideo
        });
        console.log('‚úÖ Call-user –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      } else {
        console.error('‚ùå Socket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞:', error);
      setCallState(prev => ({ ...prev, isOutgoing: false }));
    }
  }, [getLocalStream, initializePeerConnection]);

  // –ü—Ä–∏–Ω—è—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
  const acceptCall = useCallback(async () => {
    try {
      console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', callState.caller?.name);
      setCallState(prev => ({ ...prev, isIncoming: false, isConnected: true }));
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      console.log('üé• –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...');
      const localStream = await getLocalStream(callState.isVideo);
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º peer connection
      console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º peer connection –¥–ª—è –æ—Ç–≤–µ—Ç–∞...');
      const peerConnection = initializePeerConnection();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
      });
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ offer
      if (incomingOfferRef.current) {
        console.log('üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º remote description –∏–∑ offer...');
        await peerConnection.setRemoteDescription(incomingOfferRef.current);
        incomingOfferRef.current = null;
        console.log('‚úÖ Remote description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.error('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ offer');
      }

      // –°–æ–∑–¥–∞–µ–º answer
      console.log('üìù –°–æ–∑–¥–∞–µ–º answer...');
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      console.log('‚úÖ Answer —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ local description');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Socket.io
      if (socketRef.current && callState.caller) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º call-accepted —á–µ—Ä–µ–∑ Socket...');
        socketRef.current.emit('call-accepted', {
          targetUserId: callState.caller._id,
          answer
        });
        console.log('‚úÖ Call-accepted –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      } else {
        console.error('‚ùå Socket –∏–ª–∏ caller –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', error);
      setCallState(prev => ({ ...prev, isConnected: false }));
    }
  }, [callState.caller, callState.isVideo, getLocalStream, initializePeerConnection]);

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–≤–æ–Ω–æ–∫
  const rejectCall = useCallback(() => {
    console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –æ—Ç:', callState.caller?.name);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    stopAllSounds();
    playCallEnded();
    
    if (socketRef.current && callState.caller) {
      socketRef.current.emit('call-rejected', {
        targetUserId: callState.caller._id
      });
      console.log('üì§ Call-rejected –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
    
    setCallState({
      isIncoming: false,
      isOutgoing: false,
      isConnected: false,
      caller: null,
      isVideo: false
    });
  }, [callState.caller, stopAllSounds, playCallEnded]);

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
  const endCall = useCallback(() => {
    if (isEndingCallRef.current) {
      console.log('‚ö†Ô∏è endCall —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    isEndingCallRef.current = true;
    console.log('üì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    stopAllSounds();
    playCallEnded();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (localStreamRef.current) {
      localStreamRef.current.getTracks().forEach(track => track.stop());
      localStreamRef.current = null;
      console.log('üõë –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection
    if (peerConnectionRef.current) {
      peerConnectionRef.current.close();
      peerConnectionRef.current = null;
      console.log('üîó Peer connection –∑–∞–∫—Ä—ã—Ç');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.io
    if (socketRef.current && callState.caller) {
      socketRef.current.emit('call-ended', {
        targetUserId: callState.caller._id
      });
      console.log('üì§ Call-ended –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }

    setCallState({
      isIncoming: false,
      isOutgoing: false,
      isConnected: false,
      caller: null,
      isVideo: false
    });
    
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      isEndingCallRef.current = false;
    }, 1000);
  }, [callState.caller, stopAllSounds, playCallEnded]);

  // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const simulateIncomingCall = useCallback((user: User, isVideo: boolean = false) => {
    setCallState({
      isIncoming: true,
      isOutgoing: false,
      isConnected: false,
      caller: user,
      isVideo
    });
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
      // –í—ã–∑—ã–≤–∞–µ–º endCall –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      if (isEndingCallRef.current) {
        console.log('‚ö†Ô∏è endCall —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }
      
      isEndingCallRef.current = true;
      console.log('üì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ (cleanup)');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      if (localStreamRef.current) {
        localStreamRef.current.getTracks().forEach(track => track.stop());
        localStreamRef.current = null;
        console.log('üõë –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (cleanup)');
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection
      if (peerConnectionRef.current) {
        peerConnectionRef.current.close();
        peerConnectionRef.current = null;
        console.log('üîó Peer connection –∑–∞–∫—Ä—ã—Ç (cleanup)');
      }
    };
  }, []); // –£–±–∏—Ä–∞–µ–º endCall –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  return {
    callState,
    startCall,
    acceptCall,
    rejectCall,
    endCall,
    simulateIncomingCall,
    initializeSocket,
    localStream: localStreamRef.current,
    remoteStream: null // TODO: –¥–æ–±–∞–≤–∏—Ç—å remoteStream
  };
};
