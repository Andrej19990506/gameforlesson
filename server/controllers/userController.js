import User from "../models/User.js";
import bcrypt from "bcryptjs";
import { generateToken } from "../lib/utils.js";
import cloudinary from "../lib/cloudinary.js";
import multer from 'multer';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const upload = multer({ 
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB –º–∞–∫—Å–∏–º—É–º
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
        }
    }
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
export const uploadProfilePic = upload.single('profilePic');

//signup new user
export const signup = async (req, res) => {
    const {email, name, password, bio} = req.body;
    try {
        if(!email || !name || !password || !bio){
            return res.json({success: false, message: "Missing details"});
        }
        const user = await User.findOne({email});

        if(user){
            return res.json({success: false, message: "User already exists"});
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = await User.create({
            email, name, password: hashedPassword, bio
        });

        const token = generateToken(newUser._id);

        res.json({success: true, userData: newUser, message: "User created successfully", token});
        } catch (error) {
        console.log(error);
        res.json({success: false, message: error.message});
    }
}

 //controller to login user
 export const login = async (req, res) => {
    try {
        const {email, password} = req.body;
        const userData = await User.findOne({email});

        const isPasswordCorrect = await bcrypt.compare(password, userData.password);

        if(!isPasswordCorrect){
            return res.json({success: false, message: "Invalid password"});
        }

        const token = generateToken(userData._id);
        res.json({success: true, userData, message: "User logged in successfully", token});
    }   catch (error) {
        console.log(error);
        res.json({success: false, message: error.message});
    }
 }

 //controller to check if user is authenticated
 export const checkAuth = async (req, res) => {
    res.json({success: true, user: req.user, message: "User is authenticated"});
 }

 //controller to update user profile
export const updateUserProfile = async (req, res) => {
    try {
        const {name, bio} = req.body;
        const userid = req.user._id;
        let updatedUser;

        console.log(`üë§ [updateUserProfile] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userid}`);

        if (!req.file) {
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            console.log(`üë§ [updateUserProfile] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
            updatedUser = await User.findByIdAndUpdate(userid, {name, bio}, {new: true});
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            console.log(`üë§ [updateUserProfile] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
                originalname: req.file.originalname,
                mimetype: req.file.mimetype,
                size: req.file.size
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ Cloudinary –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ base64
            const uploadResult = await new Promise((resolve, reject) => {
                cloudinary.uploader.upload_stream(
                    {
                        resource_type: 'auto',
                        quality: 90, // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (0-100)
                        fetch_format: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
                        width: 400, // –¢–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏
                        height: 400, // –¢–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∫–∏
                        crop: 'fill', // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        gravity: 'face', // –§–æ–∫—É—Å –Ω–∞ –ª–∏—Ü–∞—Ö –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫
                    },
                    (error, result) => {
                        if (error) {
                            console.error('‚ùå [updateUserProfile] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:', error);
                            reject(error);
                        } else {
                            console.log('‚úÖ [updateUserProfile] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary:', result.secure_url);
                            resolve(result);
                        }
                    }
                ).end(req.file.buffer);
            });
            
            updatedUser = await User.findByIdAndUpdate(
                userid, 
                {name, bio, profilePic: uploadResult.secure_url}, 
                {new: true}
            );
        }
        
        console.log(`‚úÖ [updateUserProfile] –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
        res.json({success: true, user: updatedUser, message: "User updated successfully"});
        
    } catch (error) {
        console.log(`‚ùå [updateUserProfile] –û—à–∏–±–∫–∞:`, error);
        res.json({success: false, message: error.message});
    }
}

//controller to delete user account
export const deleteUserAccount = async (req, res) => {
    try {
        const {password} = req.body;
        const userId = req.user._id;

        console.log('Delete account request:', { userId, password: password ? 'provided' : 'missing' });

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById(userId);
        if (!user) {
            console.log('User not found:', userId);
            return res.json({success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"});
        }

        console.log('User found:', user.email);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordCorrect = await bcrypt.compare(password, user.password);
        console.log('Password check result:', isPasswordCorrect);
        
        if (!isPasswordCorrect) {
            console.log('Invalid password for user:', user.email);
            return res.json({success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"});
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const deletedUser = await User.findByIdAndDelete(userId);
        console.log('User deleted:', deletedUser ? 'success' : 'failed');

        res.json({success: true, message: "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"});
        
    } catch (error) {
        console.log('Error in deleteUserAccount:', error);
        res.json({success: false, message: error.message});
    }
}