import crypto from 'crypto';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
 */
const generateEncryptionKey = () => {
    const key = crypto.randomBytes(32);
    console.log('üîë –ù–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:');
    console.log('ENCRYPTION_KEY=' + key.toString('hex'));
    console.log('\nüìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –≤–∞—à .env —Ñ–∞–π–ª');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!');
    console.log('‚ö†Ô∏è  –ë–ï–ó –≠–¢–û–ì–û –ö–õ–Æ–ß–ê –ù–ï–í–û–ó–ú–û–ñ–ù–û –†–ê–°–®–ò–§–†–û–í–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–Ø!');
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateEncryptionKey();
