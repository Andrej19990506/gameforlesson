import crypto from 'crypto';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY 
    ? Buffer.from(process.env.ENCRYPTION_KEY, 'hex') 
    : crypto.randomBytes(32);
const ALGORITHM = 'aes-256-gcm';

/**
 * –®–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export const encryptMessage = (text) => {
    try {
        if (!text || typeof text !== 'string') {
            console.log('‚ö†Ô∏è [Encryption] –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
            return null;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π IV (Initialization Vector)
        const iv = crypto.randomBytes(16);
        
        // –°–æ–∑–¥–∞–µ–º cipher —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º AES-256-GCM (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è Node.js v22+)
        const cipher = crypto.createCipheriv(ALGORITHM, ENCRYPTION_KEY, iv);
        
        // –®–∏—Ñ—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        let encrypted = cipher.update(text, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const authTag = cipher.getAuthTag();
        
        console.log('üîê [Encryption] –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞:', text.length);
        
        return {
            encrypted,
            iv: iv.toString('hex'),
            authTag: authTag.toString('hex'),
            algorithm: ALGORITHM
        };
        
    } catch (error) {
        console.error('‚ùå [Encryption] –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        return null;
    }
};

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} encryptedData - –û–±—ä–µ–∫—Ç —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @returns {string|null} - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export const decryptMessage = (encryptedData) => {
    try {
        if (!encryptedData || !encryptedData.encrypted) {
            console.log('‚ö†Ô∏è [Encryption] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏');
            return null;
        }

        // –°–æ–∑–¥–∞–µ–º decipher (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è Node.js v22+)
        const decipher = crypto.createDecipheriv(ALGORITHM, ENCRYPTION_KEY, Buffer.from(encryptedData.iv, 'hex'));
        decipher.setAuthTag(Buffer.from(encryptedData.authTag, 'hex'));
        
        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        
        console.log('üîì [Encryption] –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞:', decrypted.length);
        
        return decrypted;
        
    } catch (error) {
        console.error('‚ùå [Encryption] –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error.message);
        return null;
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
 * @param {*} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
 */
export const isEncrypted = (data) => {
    return data && 
           typeof data === 'object' && 
           data.encrypted && 
           data.iv && 
           data.authTag && 
           data.algorithm === ALGORITHM;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
 * @returns {string} - –ù–æ–≤—ã–π –∫–ª—é—á –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
 */
export const generateNewKey = () => {
    const newKey = crypto.randomBytes(32);
    console.log('üîë [Encryption] –ù–æ–≤—ã–π –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    return newKey.toString('hex');
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
    encryptMessage,
    decryptMessage,
    isEncrypted,
    generateNewKey
};