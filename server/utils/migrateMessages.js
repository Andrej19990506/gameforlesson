import mongoose from 'mongoose';
import Message from '../models/Message.js';
import { encryptMessage } from '../utils/encryption.js';
import 'dotenv/config';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
 */
const migrateExistingMessages = async () => {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chat-app');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const unencryptedMessages = await Message.find({ 
            isEncrypted: { $ne: true },
            text: { $exists: true, $ne: null, $ne: '' }
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${unencryptedMessages.length} –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        if (unencryptedMessages.length === 0) {
            console.log('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã!');
            return;
        }
        
        let successCount = 0;
        let errorCount = 0;
        
        // –®–∏—Ñ—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for (const message of unencryptedMessages) {
            try {
                console.log(`üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${message._id}`);
                
                // –®–∏—Ñ—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                const encryptedData = encryptMessage(message.text);
                
                if (encryptedData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await Message.findByIdAndUpdate(message._id, {
                        text: encryptedData,
                        isEncrypted: true
                    });
                    
                    successCount++;
                    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${message._id} —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ`);
                } else {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message._id}`);
                    errorCount++;
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${message._id}:`, error.message);
                errorCount++;
            }
        }
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${unencryptedMessages.length}`);
        
        if (successCount > 0) {
            console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await mongoose.disconnect();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        process.exit(0);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateExistingMessages();
